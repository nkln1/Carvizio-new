I have already set up account creation in PostgreSQL on my VPS, and user data is stored correctly in the database. Now, I need to implement authentication using JWT tokens and ensure the user stays logged in.

ðŸ”¹ Backend (Node.js + Express.js)
Use the existing users table in PostgreSQL to authenticate users.
Set up JWT authentication:
Generate a JWT token on login and store it in an HTTP-only cookie.
On every request, verify the JWT and return the authenticated user.
Authentication Routes:
/api/auth/login â†’ Verify user credentials and issue JWT.
/api/auth/me â†’ Check authentication status using the JWT stored in cookies.
/api/auth/logout â†’ Clear the authentication cookie.
Security Best Practices:
Use bcrypt to hash passwords before storing them.
Implement authentication middleware to protect routes.
Store database credentials in .env for security.
ðŸ”¹ Frontend (React + Context API)
Modify AuthContext.tsx to:
Fetch /api/auth/me on app load to check if the user is logged in.
Store user data in React state (not localStorage).
Send credentials: "include" in API requests to use cookies.
Create a login & logout system:
A login form that sends credentials to /api/auth/login.
A logout button that calls /api/auth/logout and removes user data.
A dropdown menu that shows the user's email & logout option.
Ensure authentication persists after refresh:
When the user refreshes, the frontend should check /api/auth/me and keep them logged in.
ðŸ”¹ VPS Deployment
Ensure the backend runs on the VPS and connects to PostgreSQL.
Use PM2 to keep the backend running.
Configure CORS correctly to allow the frontend to communicate with the backend.
ðŸ’¡ Expected Outcome
Users can log in with their existing credentials stored in PostgreSQL.
A JWT-based authentication system with secure HTTP-only cookies.
The user stays logged in after a page refresh.
A fully functional frontend that handles login, logout, and user sessions correctly.
Please generate the full backend and frontend code for this authentication system. ðŸš€