/**
 * Script de testare pentru fluxul de notificƒÉri
 * SimuleazƒÉ crearea unui mesaj nou »ôi urmƒÉre»ôte fluxul de trimitere email
 */

import { EmailService } from './emailService.js';
import pg from 'pg';
const { Pool } = pg;

async function main() {
  console.log('=== TEST FLUX COMPLET NOTIFICƒÇRI EMAIL ===');
  console.log('Acest test simuleazƒÉ fluxul complet de trimitere a notificƒÉrilor prin email\n');

  try {
    // Conectare la baza de date
    console.log('Conectare la baza de date...');
    const pool = new Pool({
      connectionString: process.env.DATABASE_URL,
    });
    
    // Ob»õinem un service provider activ
    console.log('\nCƒÉutare service provider pentru test...');
    const result = await pool.query(`
      SELECT sp.*, np.* 
      FROM service_providers sp
      LEFT JOIN notification_preferences np ON sp.id = np.service_provider_id
      WHERE sp.id = 1
    `);
    
    if (result.rows.length === 0) {
      console.error('‚ùå Nu s-a gƒÉsit service provider-ul cu ID 1 √Æn baza de date');
      return;
    }
    
    const spData = result.rows[0];
    
    // Construim obiectul service provider pentru EmailService
    const serviceProvider = {
      id: spData.id,
      email: spData.email,
      companyName: spData.company_name,
      phone: spData.phone
    };
    
    console.log(`‚úÖ GƒÉsit service provider: ${serviceProvider.companyName} (ID: ${serviceProvider.id})`);
    console.log(`üìß Email: ${serviceProvider.email}`);
    
    // VerificƒÉm preferin»õele de notificare pentru mesaje
    const emailNotificationsEnabled = spData.email_notifications_enabled !== false; // default true
    const newMessageEmailEnabled = spData.new_message_email_enabled !== false; // default true
    
    console.log('\nVerificare preferin»õe notificare:');
    console.log(`- NotificƒÉri email activate: ${emailNotificationsEnabled ? 'DA' : 'NU'}`);
    console.log(`- NotificƒÉri pentru mesaje noi: ${newMessageEmailEnabled ? 'DA' : 'NU'}`);
    
    if (!emailNotificationsEnabled || !newMessageEmailEnabled) {
      console.log('‚ö†Ô∏è NotificƒÉrile pentru mesaje noi sunt dezactivate √Æn preferin»õe!');
      console.log('ContinuƒÉm totu»ôi testul pentru a verifica func»õionalitatea...');
    }
    
    // SimulƒÉm trimiterea unui mesaj nou
    console.log('\n1Ô∏è‚É£ Simulare MESAJ NOU...');
    
    // PregƒÉtim datele pentru mesaj
    const messageId = `test_message_${Date.now()}`;
    const messageContent = 'Acesta este un mesaj de test pentru verificarea fluxului de notificƒÉri.';
    const senderName = 'Client Test Automat';
    const requestTitle = 'Cerere Test NotificƒÉri';
    
    console.log(`- ID Mesaj: ${messageId}`);
    console.log(`- Con»õinut: ${messageContent}`);
    console.log(`- Expeditor: ${senderName}`);
    console.log(`- Cerere asociatƒÉ: ${requestTitle}`);
    
    // 2. Trimitem notificare prin email
    console.log('\n2Ô∏è‚É£ Trimitere NOTIFICARE EMAIL...');
    
    // VerificƒÉm existen»õa API key-ului ElasticEmail
    const apiKey = process.env.ELASTIC_EMAIL_API_KEY;
    if (!apiKey) {
      console.error('‚ùå API KEY Elastic Email lipse»ôte! NotificƒÉrile nu vor fi trimise.');
      process.exit(1);
    }
    
    console.log(`- API Key Elastic Email: ${apiKey.substring(0, 4)}...${apiKey.substring(apiKey.length - 4)}`);
    console.log(`- Expeditor: ${EmailService.getFromEmail()} (${EmailService.getFromName()})`);
    
    // Trimitem notificarea de mesaj nou
    const emailResult = await EmailService.sendNewMessageNotification(
      serviceProvider,
      messageContent,
      senderName,
      requestTitle,
      messageId,
      'Test direct din script test-notification-flow.js'
    );
    
    if (emailResult) {
      console.log('‚úÖ Notificare email trimisƒÉ cu SUCCES!');
      console.log(`üìß Verifica»õi adresa ${serviceProvider.email} pentru a confirma primirea email-ului.`);
    } else {
      console.error('‚ùå Eroare la trimiterea notificƒÉrii prin email!');
    }
    
    // 3. VerificƒÉm dacƒÉ a fost trimis email-ul verific√¢nd tabelul trimise_emails
    console.log('\n3Ô∏è‚É£ Verificare √Ænregistrare email √Æn baza de date...');
    try {
      const emailCheckResult = await pool.query(`
        SELECT * FROM sent_emails 
        WHERE recipient = $1 AND message_id = $2
        ORDER BY created_at DESC
        LIMIT 1
      `, [serviceProvider.email, messageId]);
      
      if (emailCheckResult.rows.length > 0) {
        const emailRecord = emailCheckResult.rows[0];
        console.log(`‚úÖ Email gƒÉsit √Æn baza de date:`);
        console.log(`- ID: ${emailRecord.id}`);
        console.log(`- Destinatar: ${emailRecord.recipient}`);
        console.log(`- Subiect: ${emailRecord.subject}`);
        console.log(`- Trimis la: ${emailRecord.created_at}`);
        console.log(`- Status API: ${emailRecord.api_response}`);
      } else {
        console.log('‚ö†Ô∏è Nu s-a gƒÉsit √Ænregistrarea email-ului √Æn baza de date.');
        console.log('Posibile cauze:');
        console.log('- Email-ul a fost trimis, dar nu a fost √Ænregistrat √Æn baza de date');
        console.log('- Tabelul sent_emails nu existƒÉ √Æn baza de date');
        console.log('- O eroare a √Æmpiedicat trimiterea email-ului');
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è Nu s-a putut verifica tabelul sent_emails: ${error.message}`);
      console.log('Cel mai probabil tabelul nu existƒÉ √Æn baza de date.');
    }
    
    // Sumar final
    console.log('\n=== SUMAR FINAL ===');
    console.log(`Service Provider: ${serviceProvider.companyName} (ID: ${serviceProvider.id})`);
    console.log(`Email: ${serviceProvider.email}`);
    console.log(`NotificƒÉri email activate: ${emailNotificationsEnabled ? 'DA' : 'NU'}`);
    console.log(`NotificƒÉri pentru mesaje noi: ${newMessageEmailEnabled ? 'DA' : 'NU'}`);
    console.log(`Rezultat trimitere email: ${emailResult ? 'SUCCES' : 'E»òEC'}`);
    
    // √énchide conexiunea la baza de date
    await pool.end();
    
  } catch (error) {
    console.error('‚ùå EROARE √éN TIMPUL TESTULUI:', error);
    process.exit(1);
  }
  
  console.log('\n=== TEST COMPLET ===');
}

main().catch(console.error);